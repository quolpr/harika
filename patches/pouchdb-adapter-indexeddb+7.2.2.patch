diff --git a/node_modules/pouchdb-adapter-indexeddb/lib/index.es.js b/node_modules/pouchdb-adapter-indexeddb/lib/index.es.js
index a118a81..a2a0f2b 100644
--- a/node_modules/pouchdb-adapter-indexeddb/lib/index.es.js
+++ b/node_modules/pouchdb-adapter-indexeddb/lib/index.es.js
@@ -1,9 +1,27 @@
-import { btoa, readAsBinaryString, binaryStringToBlobOrBuffer } from 'pouchdb-binary-utils';
+import {
+  btoa,
+  readAsBinaryString,
+  binaryStringToBlobOrBuffer,
+} from 'pouchdb-binary-utils';
 import { parseDoc } from 'pouchdb-adapter-utils';
 import { binaryMd5 } from 'pouchdb-md5';
 import { uuid, filterChange, changesHandler } from 'pouchdb-utils';
-import { createError, IDB_ERROR, MISSING_DOC, REV_CONFLICT, MISSING_STUB, BAD_ARG } from 'pouchdb-errors';
-import { latest, winningRev, merge, collectConflicts, traverseRevTree } from 'pouchdb-merge';
+import {
+  createError,
+  IDB_ERROR,
+  MISSING_DOC,
+  REV_CONFLICT,
+  MISSING_STUB,
+  BAD_ARG,
+} from 'pouchdb-errors';
+import {
+  latest,
+  winningRev,
+  merge,
+  collectConflicts,
+  traverseRevTree,
+} from 'pouchdb-merge';
+import cuid from 'cuid';
 
 var IDB_NULL = Number.MIN_SAFE_INTEGER;
 var IDB_FALSE = Number.MIN_SAFE_INTEGER + 1;
@@ -87,9 +105,7 @@ function rewrite(data) {
   }
 
   var isArray = Array.isArray(data);
-  var clone = isArray
-    ? []
-    : {};
+  var clone = isArray ? [] : {};
 
   Object.keys(data).forEach(function (key) {
     var safeKey = isArray ? key : sanitise(key);
@@ -122,7 +138,6 @@ function idbError(callback) {
 }
 
 function processAttachment(name, src, doc, isBinary) {
-
   delete doc._attachments[name].stub;
 
   if (isBinary) {
@@ -143,9 +158,11 @@ function processAttachment(name, src, doc, isBinary) {
 
 function rawIndexFields(ddoc, viewName) {
   // fields are an array of either the string name of the field, or a key value
-  var fields = ddoc.views[viewName].options &&
-               ddoc.views[viewName].options.def &&
-               ddoc.views[viewName].options.def.fields || [];
+  var fields =
+    (ddoc.views[viewName].options &&
+      ddoc.views[viewName].options.def &&
+      ddoc.views[viewName].options.def.fields) ||
+    [];
 
   // Either ['foo'] or [{'foo': 'desc'}]
   return fields.map(function (field) {
@@ -216,7 +233,7 @@ var POUCHDB_IDB_VERSION = 1;
 //
 var versionMultiplier = Math.pow(10, 13);
 function createIdbVersion() {
-  return (versionMultiplier * POUCHDB_IDB_VERSION) + new Date().getTime();
+  return versionMultiplier * POUCHDB_IDB_VERSION + new Date().getTime();
 }
 function getPouchDbVersion(version) {
   return Math.floor(version / versionMultiplier);
@@ -224,7 +241,9 @@ function getPouchDbVersion(version) {
 
 function maintainNativeIndexes(openReq, reject) {
   var docStore = openReq.transaction.objectStore(DOC_STORE);
-  var ddocsReq = docStore.getAll(IDBKeyRange.bound('_design/', '_design/\uffff'));
+  var ddocsReq = docStore.getAll(
+    IDBKeyRange.bound('_design/', '_design/\uffff')
+  );
 
   ddocsReq.onsuccess = function (e) {
     var results = e.target.result;
@@ -232,28 +251,34 @@ function maintainNativeIndexes(openReq, reject) {
 
     // NB: the only thing we're supporting here is the declared indexing
     // fields nothing more.
-    var expectedIndexes = results.filter(function (row) {
-      return row.deleted === 0 && row.revs[row.rev].data.views;
-    }).map(function (row) {
-      return row.revs[row.rev].data;
-    }).reduce(function (indexes, ddoc) {
-      return Object.keys(ddoc.views).reduce(function (acc, viewName) {
-        var fields = rawIndexFields(ddoc, viewName);
-
-        if (fields && fields.length > 0) {
-          acc[naturalIndexName(fields)] = correctIndexFields(fields);
-        }
+    var expectedIndexes = results
+      .filter(function (row) {
+        return row.deleted === 0 && row.revs[row.rev].data.views;
+      })
+      .map(function (row) {
+        return row.revs[row.rev].data;
+      })
+      .reduce(function (indexes, ddoc) {
+        return Object.keys(ddoc.views).reduce(function (acc, viewName) {
+          var fields = rawIndexFields(ddoc, viewName);
+
+          if (fields && fields.length > 0) {
+            acc[naturalIndexName(fields)] = correctIndexFields(fields);
+          }
 
-        return acc;
-      }, indexes);
-    }, {});
+          return acc;
+        }, indexes);
+      }, {});
 
     var expectedIndexNames = Object.keys(expectedIndexes);
 
     // Delete any indexes that aren't system indexes or expected
     var systemIndexNames = ['seq'];
     existingIndexNames.forEach(function (index) {
-      if (systemIndexNames.indexOf(index) === -1  && expectedIndexNames.indexOf(index) === -1) {
+      if (
+        systemIndexNames.indexOf(index) === -1 &&
+        expectedIndexNames.indexOf(index) === -1
+      ) {
         docStore.deleteIndex(index);
       }
     });
@@ -275,10 +300,10 @@ function maintainNativeIndexes(openReq, reject) {
 
 function upgradePouchDbSchema(db, pouchdbVersion) {
   if (pouchdbVersion < 1) {
-    var docStore = db.createObjectStore(DOC_STORE, {keyPath : 'id'});
-    docStore.createIndex('seq', 'seq', {unique: true});
+    var docStore = db.createObjectStore(DOC_STORE, { keyPath: 'id' });
+    docStore.createIndex('seq', 'seq', { unique: true });
 
-    db.createObjectStore(META_STORE, {keyPath: 'id'});
+    db.createObjectStore(META_STORE, { keyPath: 'id' });
   }
 
   // Declare more PouchDB schema changes here
@@ -286,9 +311,9 @@ function upgradePouchDbSchema(db, pouchdbVersion) {
 }
 
 function openDatabase(openDatabases, api, opts, resolve, reject) {
-  var openReq = opts.versionchanged ?
-    indexedDB.open(opts.name) :
-    indexedDB.open(opts.name, createIdbVersion());
+  var openReq = opts.versionchanged
+    ? indexedDB.open(opts.name)
+    : indexedDB.open(opts.name, createIdbVersion());
 
   openReq.onupgradeneeded = function (e) {
     if (e.oldVersion > 0 && e.oldVersion < versionMultiplier) {
@@ -296,7 +321,9 @@ function openDatabase(openDatabases, api, opts, resolve, reject) {
       // For now we're going to just error out here: users must manually
       // migrate between the two. In the future, dependent on performance tests,
       // we might silently migrate
-      throw new Error('Incorrect adapter: you should specify the "idb" adapter to open this DB');
+      throw new Error(
+        'Incorrect adapter: you should specify the "idb" adapter to open this DB'
+      );
     }
 
     var db = e.target.result;
@@ -307,12 +334,12 @@ function openDatabase(openDatabases, api, opts, resolve, reject) {
   };
 
   openReq.onblocked = function (e) {
-      // AFAICT this only occurs if, after sending `onversionchange` events to
-      // all other open DBs (ie in different tabs), there are still open
-      // connections to the DB. In this code we should never see this because we
-      // close our DBs on these events, and all DB interactions are wrapped in
-      // safely re-opening the DB.
-      console.error('onblocked, this should never happen', e);
+    // AFAICT this only occurs if, after sending `onversionchange` events to
+    // all other open DBs (ie in different tabs), there are still open
+    // connections to the DB. In this code we should never see this because we
+    // close our DBs on these events, and all DB interactions are wrapped in
+    // safely re-opening the DB.
+    console.error('onblocked, this should never happen', e);
   };
 
   openReq.onsuccess = function (e) {
@@ -330,11 +357,11 @@ function openDatabase(openDatabases, api, opts, resolve, reject) {
       idb.close();
     };
 
-    var metadata = {id: META_STORE};
+    var metadata = { id: META_STORE };
     var txn = idb.transaction([META_STORE], 'readwrite');
 
     txn.oncomplete = function () {
-      resolve({idb: idb, metadata: metadata});
+      resolve({ idb: idb, metadata: metadata });
     };
 
     var metaStore = txn.objectStore(META_STORE);
@@ -349,7 +376,7 @@ function openDatabase(openDatabases, api, opts, resolve, reject) {
 
       if (!('seq' in metadata)) {
         changed = true;
-        metadata.seq = 0;
+        metadata.seq = cuid();
       }
 
       if (!('db_uuid' in metadata)) {
@@ -368,10 +395,10 @@ function openDatabase(openDatabases, api, opts, resolve, reject) {
   };
 }
 
-function setup (openDatabases, api, opts) {
+function setup(openDatabases, api, opts) {
   if (!openDatabases[opts.name] || openDatabases[opts.name].versionchanged) {
-    opts.versionchanged = openDatabases[opts.name] &&
-                          openDatabases[opts.name].versionchanged;
+    opts.versionchanged =
+      openDatabases[opts.name] && openDatabases[opts.name].versionchanged;
 
     openDatabases[opts.name] = new Promise(function (resolve, reject) {
       openDatabase(openDatabases, api, opts, resolve, reject);
@@ -381,14 +408,14 @@ function setup (openDatabases, api, opts) {
   return openDatabases[opts.name];
 }
 
-function info (metadata, callback) {
+function info(metadata, callback) {
   callback(null, {
     doc_count: metadata.doc_count,
-    update_seq: metadata.seq
+    update_seq: metadata.seq,
   });
 }
 
-function get (txn, id, opts, callback) {
+function get(txn, id, opts, callback) {
   if (txn.error) {
     return callback(txn.error);
   }
@@ -397,7 +424,7 @@ function get (txn, id, opts, callback) {
     var doc = e.target.result;
     var rev;
     if (!opts.rev) {
-      rev = (doc && doc.rev);
+      rev = doc && doc.rev;
     } else {
       rev = opts.latest ? latest(opts.rev, doc) : opts.rev;
     }
@@ -417,7 +444,7 @@ function get (txn, id, opts, callback) {
     callback(null, {
       doc: result,
       metadata: doc,
-      ctx: txn
+      ctx: txn,
     });
   };
 }
@@ -453,8 +480,7 @@ function getAttachment(txn, docId, attachId, _, opts, cb) {
   txn.txn.onabort = cb;
 }
 
-function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
-
+function bulkDocs(api, req, opts, metadata, dbOpts, idbChanges, callback) {
   var txn;
 
   // TODO: I would prefer to get rid of these globals
@@ -464,7 +490,7 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
   var lastWriteIndex;
 
   var revsLimit = dbOpts.revs_limit || 1000;
-  var rewriteEnabled = dbOpts.name.indexOf("-mrview-") === -1;
+  var rewriteEnabled = dbOpts.name.indexOf('-mrview-') === -1;
 
   // We only need to track 1 revision for local documents
   function docsRevsLimit(doc) {
@@ -480,7 +506,7 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
       return atob(data);
     } catch (e) {
       return {
-        error: createError(BAD_ARG, 'Attachment is not a valid base64 string')
+        error: createError(BAD_ARG, 'Attachment is not a valid base64 string'),
       };
     }
   }
@@ -506,21 +532,22 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
   }
 
   function processDocs(txn, docs, oldDocs) {
-
     docs.forEach(function (doc, i) {
       var newDoc;
 
       // The first document write cannot be a deletion
-      if ('was_delete' in opts && !(oldDocs.hasOwnProperty(doc.id))) {
+      if ('was_delete' in opts && !oldDocs.hasOwnProperty(doc.id)) {
         newDoc = createError(MISSING_DOC, 'deleted');
 
-      // The first write of a document cannot specify a revision
-      } else if (opts.new_edits &&
-                 !oldDocs.hasOwnProperty(doc.id) &&
-                 rootIsMissing(doc)) {
+        // The first write of a document cannot specify a revision
+      } else if (
+        opts.new_edits &&
+        !oldDocs.hasOwnProperty(doc.id) &&
+        rootIsMissing(doc)
+      ) {
         newDoc = createError(REV_CONFLICT);
 
-      // Update the existing document
+        // Update the existing document
       } else if (oldDocs.hasOwnProperty(doc.id)) {
         newDoc = update(txn, doc, oldDocs[doc.id]);
         // The update can be rejected if it is an update to an existing
@@ -529,7 +556,7 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
           return;
         }
 
-      // New document
+        // New document
       } else {
         // Ensure new documents are also stemmed
         var merged = merge([], doc.rev_tree[0], docsRevsLimit(doc));
@@ -553,26 +580,24 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
   // Converts from the format returned by parseDoc into the new format
   // we use to store
   function convertDocFormat(doc) {
-
     var newDoc = {
       id: doc.metadata.id,
       rev: doc.metadata.rev,
       rev_tree: doc.metadata.rev_tree,
-      revs: doc.metadata.revs || {}
+      revs: doc.metadata.revs || {},
     };
 
     newDoc.revs[newDoc.rev] = {
       data: doc.data,
-      deleted: doc.metadata.deleted
+      deleted: doc.metadata.deleted,
     };
 
     return newDoc;
   }
 
   function update(txn, doc, oldDoc) {
-
     // Ignore updates to existing revisions
-    if ((doc.rev in oldDoc.revs) && !opts.new_edits) {
+    if (doc.rev in oldDoc.revs && !opts.new_edits) {
       return false;
     }
 
@@ -597,10 +622,12 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
 
     doc.attachments = oldDoc.attachments;
 
-    var inConflict = opts.new_edits && (((oldDoc.deleted && doc.deleted) ||
-       (!oldDoc.deleted && merged.conflicts !== 'new_leaf') ||
-       (oldDoc.deleted && !doc.deleted && merged.conflicts === 'new_branch') ||
-       (oldDoc.rev === doc.rev)));
+    var inConflict =
+      opts.new_edits &&
+      ((oldDoc.deleted && doc.deleted) ||
+        (!oldDoc.deleted && merged.conflicts !== 'new_leaf') ||
+        (oldDoc.deleted && !doc.deleted && merged.conflicts === 'new_branch') ||
+        oldDoc.rev === doc.rev);
 
     if (inConflict) {
       return createError(REV_CONFLICT);
@@ -612,7 +639,6 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
   }
 
   function write(txn, doc, i) {
-
     // We copy the data from the winning revision into the root
     // of the document so that it can be indexed
     var winningRev$$1 = winningRev(doc);
@@ -644,7 +670,7 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
     // TODO: index expects a unique seq, not sure if ignoring local will
     // work
     if (!isLocal) {
-      doc.seq = ++metadata.seq;
+      doc.seq = cuid();
 
       var delta = 0;
       // If its a new document, we wont decrement if deleted
@@ -661,7 +687,9 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
     // If there have been revisions stemmed when merging trees,
     // delete their data
     if (doc.stemmedRevs) {
-      doc.stemmedRevs.forEach(function (rev) { delete doc.revs[rev]; });
+      doc.stemmedRevs.forEach(function (rev) {
+        delete doc.revs[rev];
+      });
     }
     delete doc.stemmedRevs;
 
@@ -682,9 +710,7 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
           }
 
           doc.attachments[attachment.digest].revs[writtenRev] = true;
-
         } else {
-
           doc.attachments[attachment.digest] = attachment;
           doc.attachments[attachment.digest].revs = {};
           doc.attachments[attachment.digest].revs[writtenRev] = true;
@@ -694,7 +720,7 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
             digest: attachment.digest,
             content_type: attachment.content_type,
             length: attachment.length,
-            revpos: parseInt(writtenRev, 10)
+            revpos: parseInt(writtenRev, 10),
           };
         }
       }
@@ -706,7 +732,7 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
         results[i] = {
           ok: true,
           id: doc.id,
-          rev: '0-0'
+          rev: '0-0',
         };
       };
       updateSeq(i);
@@ -717,7 +743,7 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
       results[i] = {
         ok: true,
         id: doc.id,
-        rev: writtenRev
+        rev: writtenRev,
       };
       updateSeq(i);
     };
@@ -740,7 +766,10 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
       if (binData.error) {
         return Promise.reject(binData.error);
       }
-      attachment.data = binaryStringToBlobOrBuffer(binData, attachment.content_type);
+      attachment.data = binaryStringToBlobOrBuffer(
+        binData,
+        attachment.content_type
+      );
     } else {
       binData = attachment.data;
     }
@@ -796,30 +825,36 @@ function bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {
     docs.push(convertDocFormat(result));
   }
 
-  preProcessAttachments().then(function () {
-    api._openTransactionSafely([DOC_STORE, META_STORE], 'readwrite', function (err, _txn) {
-      if (err) {
-        return callback(err);
-      }
+  preProcessAttachments()
+    .then(function () {
+      api._openTransactionSafely(
+        [DOC_STORE, META_STORE],
+        'readwrite',
+        function (err, _txn) {
+          if (err) {
+            return callback(err);
+          }
 
-      txn = _txn;
+          txn = _txn;
 
-      txn.onabort = function () {
-        callback(error);
-      };
-      txn.ontimeout = idbError(callback);
+          txn.onabort = function () {
+            callback(error);
+          };
+          txn.ontimeout = idbError(callback);
 
-      txn.oncomplete = function () {
-        idbChanges.notify(dbOpts.name);
-        callback(null, results);
-      };
+          txn.oncomplete = function () {
+            idbChanges.notify(dbOpts.name);
+            callback(null, results);
+          };
 
-      // We would like to use promises here, but idb sucks
-      fetchExistingDocs(txn, docs);
+          // We would like to use promises here, but idb sucks
+          fetchExistingDocs(txn, docs);
+        }
+      );
+    })
+    .catch(function (err) {
+      callback(err);
     });
-  }).catch(function (err) {
-    callback(err);
-  });
 }
 
 function allDocsKeys(keys, docStore, allDocsInner) {
@@ -829,14 +864,14 @@ function allDocsKeys(keys, docStore, allDocsInner) {
   keys.forEach(function (key, index) {
     docStore.get(key).onsuccess = function (event) {
       if (event.target.result) {
-      valuesBatch[index] = event.target.result;
+        valuesBatch[index] = event.target.result;
       } else {
-        valuesBatch[index] = {key: key, error: 'not_found'};
+        valuesBatch[index] = { key: key, error: 'not_found' };
       }
       count++;
       if (count === keys.length) {
         valuesBatch.forEach(function (doc) {
-            allDocsInner(doc);
+          allDocsInner(doc);
         });
       }
     };
@@ -867,18 +902,18 @@ function createKeyRange(start, end, inclusiveEnd, key, descending) {
       return IDBKeyRange.only(key);
     }
   } catch (e) {
-    return {error: e};
+    return { error: e };
   }
   return null;
 }
 
 function handleKeyRangeError(opts, metadata, err, callback) {
-  if (err.name === "DataError" && err.code === 0) {
+  if (err.name === 'DataError' && err.code === 0) {
     // data error, start is less than end
     var returnVal = {
       total_rows: metadata.doc_count,
       offset: opts.skip,
-      rows: []
+      rows: [],
     };
     /* istanbul ignore if */
     if (opts.update_seq) {
@@ -889,7 +924,7 @@ function handleKeyRangeError(opts, metadata, err, callback) {
   callback(createError(IDB_ERROR, err.name, err.message));
 }
 
-function allDocs (txn, metadata, opts, callback) {
+function allDocs(txn, metadata, opts, callback) {
   if (txn.error) {
     return callback(txn.error);
   }
@@ -899,7 +934,7 @@ function allDocs (txn, metadata, opts, callback) {
     var returnVal = {
       total_rows: metadata.doc_count,
       offset: opts.skip,
-      rows: []
+      rows: [],
     };
 
     /* istanbul ignore if */
@@ -967,8 +1002,8 @@ function allDocs (txn, metadata, opts, callback) {
       id: doc.id,
       key: doc.id,
       value: {
-        rev: doc.rev
-      }
+        rev: doc.rev,
+      },
     };
 
     var deleted = doc.deleted;
@@ -995,7 +1030,7 @@ function allDocs (txn, metadata, opts, callback) {
       var returnVal = {
         total_rows: metadata.doc_count,
         offset: 0,
-        rows: results
+        rows: results,
       };
 
       /* istanbul ignore if */
@@ -1006,19 +1041,20 @@ function allDocs (txn, metadata, opts, callback) {
     });
   }
 
-  var cursor = descending ?
-    docStore.openCursor(keyRange, descending) :
-    docStore.openCursor(keyRange);
+  var cursor = descending
+    ? docStore.openCursor(keyRange, descending)
+    : docStore.openCursor(keyRange);
 
   cursor.onsuccess = function (e) {
-
     var doc = e.target.result && e.target.result.value;
 
     // Happens if opts does not have limit,
     // because cursor will end normally then,
     // when all docs are retrieved.
     // Would not be needed, if getAll() optimization was used like in #6059
-    if (!doc) { return; }
+    if (!doc) {
+      return;
+    }
 
     // Skip local docs
     if (/^_local/.test(doc.id)) {
@@ -1030,10 +1066,9 @@ function allDocs (txn, metadata, opts, callback) {
       e.target.result.continue();
     }
   };
-
 }
 
-function changes (txn, idbChanges, api, dbOpts, opts) {
+function changes(txn, idbChanges, api, dbOpts, opts) {
   if (txn.error) {
     return opts.complete(txn.error);
   }
@@ -1045,7 +1080,7 @@ function changes (txn, idbChanges, api, dbOpts, opts) {
     return {
       cancel: function () {
         idbChanges.removeListener(dbOpts.name, id);
-      }
+      },
     };
   }
 
@@ -1065,7 +1100,9 @@ function changes (txn, idbChanges, api, dbOpts, opts) {
   var processing = [];
 
   function onReqSuccess(e) {
-    if (!e.target.result) { return; }
+    if (!e.target.result) {
+      return;
+    }
     var cursor = e.target.result;
     var doc = cursor.value;
     // Overwrite doc.data, which may have been rewritten (see rewrite.js) with
@@ -1125,7 +1162,7 @@ function changes (txn, idbChanges, api, dbOpts, opts) {
     Promise.all(processing).then(function () {
       opts.complete(null, {
         results: results,
-        last_seq: lastSeq
+        last_seq: lastSeq,
       });
     });
   }
@@ -1141,7 +1178,7 @@ function changes (txn, idbChanges, api, dbOpts, opts) {
   req.onsuccess = onReqSuccess;
 }
 
-function getRevisionTree (txn, id, callback) {
+function getRevisionTree(txn, id, callback) {
   if (txn.error) {
     return callback(txn.error);
   }
@@ -1156,7 +1193,7 @@ function getRevisionTree (txn, id, callback) {
   };
 }
 
-function doCompaction (txn, id, revs, callback) {
+function doCompaction(txn, id, revs, callback) {
   if (txn.error) {
     return callback(txn.error);
   }
@@ -1207,15 +1244,14 @@ function doCompaction (txn, id, revs, callback) {
   };
 }
 
-function destroy (dbOpts, openDatabases, idbChanges, callback) {
-
+function destroy(dbOpts, openDatabases, idbChanges, callback) {
   idbChanges.removeAllListeners(dbOpts.name);
 
   function doDestroy() {
     var req = indexedDB.deleteDatabase(dbOpts.name);
     req.onsuccess = function () {
       delete openDatabases[dbOpts.name];
-      callback(null, {ok: true});
+      callback(null, { ok: true });
     };
   }
 
@@ -1228,7 +1264,6 @@ function destroy (dbOpts, openDatabases, idbChanges, callback) {
   } else {
     doDestroy();
   }
-
 }
 
 // Adapted from
@@ -1319,7 +1354,7 @@ function generateKeyRange(opts) {
     // Flip before generating. We'll check descending again later when performing
     // an index request
     var realEndkey = opts.startkey,
-        realInclusiveEnd = opts.inclusive_start;
+      realInclusiveEnd = opts.inclusive_start;
 
     opts.startkey = opts.endkey;
     opts.endkey = realEndkey;
@@ -1333,7 +1368,10 @@ function generateKeyRange(opts) {
     }
 
     if (defined(opts, 'startkey') && !defined(opts, 'endkey')) {
-      return IDBKeyRange.lowerBound(convert(opts.startkey), !opts.inclusive_start);
+      return IDBKeyRange.lowerBound(
+        convert(opts.startkey),
+        !opts.inclusive_start
+      );
     }
 
     if (!defined(opts, 'startkey') && defined(opts, 'endkey')) {
@@ -1342,8 +1380,10 @@ function generateKeyRange(opts) {
 
     if (defined(opts, 'startkey') && defined(opts, 'endkey')) {
       return IDBKeyRange.bound(
-        convert(opts.startkey),    convert(opts.endkey),
-        !opts.inclusive_start, !opts.inclusive_end
+        convert(opts.startkey),
+        convert(opts.endkey),
+        !opts.inclusive_start,
+        !opts.inclusive_end
       );
     }
 
@@ -1366,12 +1406,17 @@ function getIndexHandle(pdb, fields, reject) {
       txn.onabort = idbError(reject);
       txn.ontimeout = idbError(reject);
 
-      var existingIndexNames = Array.from(txn.objectStore(DOC_STORE).indexNames);
+      var existingIndexNames = Array.from(
+        txn.objectStore(DOC_STORE).indexNames
+      );
 
       if (existingIndexNames.indexOf(indexName) === -1) {
         // The index is missing, force a db restart and try again
-        pdb._freshen()
-          .then(function () { return getIndexHandle(pdb, fields, reject); })
+        pdb
+          ._freshen()
+          .then(function () {
+            return getIndexHandle(pdb, fields, reject);
+          })
           .then(resolve);
       } else {
         resolve(txn.objectStore(DOC_STORE).index(indexName));
@@ -1412,20 +1457,29 @@ function query(idb, signature, opts) {
   var parts = signature.split('/');
 
   return new Promise(function (resolve, reject) {
-    pdb.get('_design/' + parts[0]).then(function (ddoc) {
-      var fields = rawIndexFields(ddoc, parts[1]);
-      if (!fields) {
-        throw new Error('ddoc ' + ddoc._id +' with view ' + parts[1] +
-          ' does not have map.options.def.fields defined.');
-      }
+    pdb
+      .get('_design/' + parts[0])
+      .then(function (ddoc) {
+        var fields = rawIndexFields(ddoc, parts[1]);
+        if (!fields) {
+          throw new Error(
+            'ddoc ' +
+              ddoc._id +
+              ' with view ' +
+              parts[1] +
+              ' does not have map.options.def.fields defined.'
+          );
+        }
 
-      var skip = opts.skip;
-      var limit = Number.isInteger(opts.limit) && opts.limit;
+        var skip = opts.skip;
+        var limit = Number.isInteger(opts.limit) && opts.limit;
 
-      return getIndexHandle(pdb, fields, reject)
-        .then(function (indexHandle) {
+        return getIndexHandle(pdb, fields, reject).then(function (indexHandle) {
           var keyRange = generateKeyRange(opts);
-          var req = indexHandle.openCursor(keyRange, opts.descending ? 'prev' : 'next');
+          var req = indexHandle.openCursor(
+            keyRange,
+            opts.descending ? 'prev' : 'next'
+          );
 
           var rows = [];
           req.onerror = idbError(reject);
@@ -1434,7 +1488,7 @@ function query(idb, signature, opts) {
 
             if (!cursor || limit === 0) {
               return resolve({
-                rows: rows
+                rows: rows,
               });
             }
 
@@ -1448,14 +1502,13 @@ function query(idb, signature, opts) {
               limit = limit - 1;
             }
 
-            rows.push({doc: externaliseRecord(cursor.value)});
+            rows.push({ doc: externaliseRecord(cursor.value) });
             cursor.continue();
           };
         });
       })
       .catch(reject);
   });
-
 }
 
 function viewCleanup() {
@@ -1481,7 +1534,6 @@ var idbChanges = new changesHandler();
 var openDatabases = {};
 
 function IdbPouch(dbOpts, callback) {
-
   var api = this;
   var metadata = {};
 
@@ -1489,18 +1541,20 @@ function IdbPouch(dbOpts, callback) {
   var $ = function (fun) {
     return function () {
       var args = Array.prototype.slice.call(arguments);
-      setup(openDatabases, api, dbOpts).then(function (res) {
-        metadata = res.metadata;
-        args.unshift(res.idb);
-        fun.apply(api, args);
-      }).catch(function (err) {
-        var last = args.unshift();
-        if (typeof last === 'function') {
-          last(err);
-        } else {
-          console.error(err);
-        }
-      });
+      setup(openDatabases, api, dbOpts)
+        .then(function (res) {
+          metadata = res.metadata;
+          args.unshift(res.idb);
+          fun.apply(api, args);
+        })
+        .catch(function (err) {
+          var last = args.unshift();
+          if (typeof last === 'function') {
+            last(err);
+          } else {
+            console.error(err);
+          }
+        });
     };
   };
   // the promise version of $
@@ -1509,12 +1563,14 @@ function IdbPouch(dbOpts, callback) {
       var args = Array.prototype.slice.call(arguments);
 
       return new Promise(function (resolve, reject) {
-        setup(openDatabases, api, dbOpts).then(function (res) {
-          metadata = res.metadata;
-          args.unshift(res.idb);
-
-          return fun.apply(api, args);
-        }).then(resolve)
+        setup(openDatabases, api, dbOpts)
+          .then(function (res) {
+            metadata = res.metadata;
+            args.unshift(res.idb);
+
+            return fun.apply(api, args);
+          })
+          .then(resolve)
           .catch(reject);
       });
     };
@@ -1530,27 +1586,35 @@ function IdbPouch(dbOpts, callback) {
     return function () {
       var args = Array.prototype.slice.call(arguments);
       var txn = {};
-      setup(openDatabases, api, dbOpts).then(function (res) {
-        metadata = res.metadata;
-        txn.txn = res.idb.transaction(stores, mode);
-        args.unshift(txn);
-        fun.apply(api, args);
-      }).catch(function (err) {
-        console.error('Failed to establish transaction safely');
-        console.error(err);
-        txn.error = err;
-      });
+      setup(openDatabases, api, dbOpts)
+        .then(function (res) {
+          metadata = res.metadata;
+          txn.txn = res.idb.transaction(stores, mode);
+          args.unshift(txn);
+          fun.apply(api, args);
+        })
+        .catch(function (err) {
+          console.error('Failed to establish transaction safely');
+          console.error(err);
+          txn.error = err;
+        });
     };
   };
 
   api._openTransactionSafely = function (stores, mode, callback) {
-    $t(function (txn, callback) {
-      callback(txn.error, txn.txn);
-    }, stores, mode)(callback);
+    $t(
+      function (txn, callback) {
+        callback(txn.error, txn.txn);
+      },
+      stores,
+      mode
+    )(callback);
   };
 
   api._remote = false;
-  api.type = function () { return ADAPTER_NAME; };
+  api.type = function () {
+    return ADAPTER_NAME;
+  };
 
   api._id = $(function (_, cb) {
     cb(null, metadata.db_uuid);
@@ -1581,7 +1645,7 @@ function IdbPouch(dbOpts, callback) {
 
   api._customFindAbstractMapper = {
     query: $p(query),
-    viewCleanup: $p(viewCleanup)
+    viewCleanup: $p(viewCleanup),
   };
 
   api._destroy = function (opts, callback) {
@@ -1615,7 +1679,7 @@ IdbPouch.valid = function () {
   return true;
 };
 
-function index (PouchDB) {
+function index(PouchDB) {
   PouchDB.adapter(ADAPTER_NAME, IdbPouch, true);
 }
 
